"""Claude Codeナレッジベースのテストデータ。"""

CLAUDE_CODE_KNOWLEDGE = [
    {
        "title": "Claude Codeとは",
        "content": """Claude CodeはAnthropicが開発したAI支援コーディングツールです。
        ターミナルベースのインターフェースを提供し、ファイルの読み書き、コード生成、
        デバッグ支援などの機能を備えています。Python、JavaScript、Rust、Goなど
        多くのプログラミング言語をサポートしており、開発者の生産性向上を支援します。""",
        "category": "基本情報",
        "tags": ["claude-code", "AI", "コーディング", "開発ツール"],
    },
    {
        "title": "Claude Codeのインストール方法",
        "content": """Claude Codeをインストールするには以下の手順を実行してください：
        1. pipを使用してインストール: pip install claude-code
        2. または、npmを使用: npm install -g @anthropic/claude-code
        3. APIキーを設定: claude-code auth login
        4. 初回セットアップ: claude-code init
        インストール後は claude-code コマンドでCLIが起動します。""",
        "category": "セットアップ",
        "tags": ["インストール", "セットアップ", "CLI", "認証"],
    },
    {
        "title": "ファイル操作機能",
        "content": """Claude Codeは強力なファイル操作機能を提供します：
        - Read: ファイルの内容を読み取り
        - Write: 新しいファイルの作成や既存ファイルの上書き
        - Edit: 部分的なファイル編集（文字列置換）
        - Glob: パターンマッチングによるファイル検索
        - LS: ディレクトリ一覧表示
        これらの機能により、プロジェクト全体を効率的に管理できます。""",
        "category": "機能",
        "tags": ["ファイル操作", "Read", "Write", "Edit", "Glob"],
    },
    {
        "title": "コード生成とリファクタリング",
        "content": """Claude Codeはコード生成とリファクタリングの強力な機能を提供します：
        - 自動コード生成: 要件に基づいたコードの自動生成
        - リファクタリング: コードの構造改善と最適化
        - バグ修正: 既存コードのバグ検出と修正提案
        - 型安全性: TypeScriptやPythonの型ヒントの追加
        - テストコード生成: ユニットテストの自動作成
        これらの機能により開発効率が大幅に向上します。""",
        "category": "機能",
        "tags": ["コード生成", "リファクタリング", "バグ修正", "テスト"],
    },
    {
        "title": "TaskGroup機能",
        "content": """Claude CodeはPython 3.11+のTaskGroupを活用した並行処理をサポートします：
        - 複数タスクの並行実行
        - エラーハンドリングの統合
        - 効率的なリソース管理
        - 非同期処理の最適化
        TaskGroupにより、従来の30秒かかる処理を8秒に短縮可能です。""",
        "category": "高度な機能",
        "tags": ["TaskGroup", "並行処理", "非同期", "パフォーマンス"],
    },
    {
        "title": "プロジェクト管理機能",
        "content": """Claude Codeはプロジェクト全体の管理機能を提供します：
        - Git統合: コミット、プッシュ、プルリクエスト作成
        - 依存関係管理: package.json、requirements.txtの更新
        - プロジェクト構造分析: ファイル構成の理解と提案
        - ドキュメント生成: README、API文書の自動生成
        - CI/CD統合: GitHub Actionsなどとの連携
        これにより一貫したプロジェクト管理が可能になります。""",
        "category": "プロジェクト管理",
        "tags": ["Git", "依存関係", "ドキュメント", "CI/CD"],
    },
    {
        "title": "エラーハンドリングとデバッグ",
        "content": """Claude Codeの強力なエラーハンドリング機能：
        - スタックトレース解析: エラーの原因を特定
        - 修正提案: エラーの解決方法を自動提案
        - ログ分析: アプリケーションログの解析
        - パフォーマンス問題: ボトルネックの特定と最適化提案
        - セキュリティ脆弱性: 潜在的なセキュリティ問題の検出
        開発中の問題を迅速に解決できます。""",
        "category": "デバッグ",
        "tags": ["エラーハンドリング", "デバッグ", "ログ分析", "セキュリティ"],
    },
    {
        "title": "言語サポートと統合",
        "content": """Claude Codeは多数のプログラミング言語をサポート：
        - Python: フル機能サポート、型ヒント、テスト生成
        - JavaScript/TypeScript: Node.js、React、Vue.js対応
        - Rust: Cargo統合、所有権システムの理解
        - Go: モジュール管理、goroutine最適化
        - Java: Maven/Gradle統合、Spring Boot対応
        - C++: CMake統合、メモリ管理最適化
        各言語の特性を理解した最適なコードを生成します。""",
        "category": "言語サポート",
        "tags": ["Python", "JavaScript", "Rust", "Go", "Java", "C++"],
    },
    {
        "title": "最適化とベストプラクティス",
        "content": """Claude Codeが提供する最適化機能：
        - パフォーマンス最適化: アルゴリズムとデータ構造の改善
        - メモリ使用量削減: 効率的なメモリ管理
        - コード品質向上: リンター設定と自動修正
        - セキュリティ強化: 脆弱性検出と修正
        - 可読性改善: コメント追加と構造改善
        - テストカバレッジ: テストの充実度向上
        これらにより、プロダクション品質のコードを作成できます。""",
        "category": "最適化",
        "tags": ["パフォーマンス", "セキュリティ", "品質", "テスト"],
    },
    {
        "title": "トラブルシューティング",
        "content": """Claude Code使用時の一般的な問題と解決方法：
        - APIキーエラー: 認証情報の再設定が必要
        - ファイル権限問題: sudo権限でのファイルアクセス
        - メモリ不足: 大容量ファイル処理時のチューニング
        - ネットワークエラー: プロキシ設定の確認
        - 言語固有の問題: 言語バージョンの互換性確認
        - パフォーマンス低下: キャッシュのクリアとリフレッシュ
        問題解決により安定した開発環境を維持できます。""",
        "category": "トラブルシューティング",
        "tags": ["トラブルシューティング", "エラー解決", "設定", "パフォーマンス"],
    },
]
